\version "2.18.2"
#(ly:set-option 'point-and-click #f)
\include "utility.liy"

versionCode = #(strftime "%Y-%m-%d-%H-%M" (localtime (current-time)))
%we will use this date/timestamp as a version code

deEmphasisRatioForMidiEmphasizedParts = #0.4
%we will multiply the vloume of the non-emphasized parts by this ratio while letting the 
% emphasized part be at an un unreduced volume to generate the emphasized part midi files. (used for singers to paractice)

#(set-global-staff-size 15.5)
#(set-default-paper-size "letter")

%handle variables defined on the command line by m,eans of the "-e '(define-public foo 42)'" command line syntax.
#(use-modules (guile-user))
#(if (not (defined? 'makeMidiOutput)) 
    (begin
        (newline)(display "makeMidiOutput was not defined, so we are setting it to default value.")(newline)
        (define makeMidiOutput #f)
    )
)
#(if (not (defined? 'makeGraphicalOutput)) 
    (begin
        (newline)(display "makeGraphicalOutput was not defined, so we are setting it to default value.")(newline)
        (define makeGraphicalOutput #f)
    )
)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  The variables makeMidiOutput and makeGraphicalOutput control whether to include a \midi output definition and a \layout output definition in 
%  the score.  Roughly speaking, this controls whether we make a midi file and whether we make a pdf file.  Strictly speaking, this controls
%  whether we include a \midi block and whether we include a \layout block in the \score block.
%  It doesn't seem to be possible ever to simultaneously not make a midi file AND not make a pdf.
%  whereas making a midi file is independently controllable by the choice of whether to include the \midi output definition in the score block,
%  making a pdf file depends on the combination of the midi choice and the layout choice. 
%     _____________________________________________________________________________________________________________________________________
%     || include a \midi output defintion   |   include a \layout output definition  ||  midi file is created  |  pdf file is created    ||
%     ||====================================|========================================||========================|=========================||
%     || no                                 |   no                                   ||  no                    | yes                     ||
%     || no                                 |   yes                                  ||  no                    | yes                     ||
%     || yes                                |   no                                   ||  yes                   | no                      ||
%     || yes                                |   yes                                  ||  yes                   | yes                     ||
%     -------------------------------------------------------------------------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\paper{
    % oddFooterMarkup = \markup{  \teeny { "version: " \versionCode }}
    % oddFooterMarkup = \markup{  \teeny { "version: " \versionCode }}
    % \void #(begin (newline)(display "oddFooterMarkup: "))
    % \displayScheme \oddFooterMarkup
    
% (markup
%   #:line
%   (#:column
%    (#:fill-line
%     (#:on-the-fly
%      part-first-page
%      (#:fromproperty (quote header:copyright)))
%     #:fill-line
%     (#:on-the-fly
%      last-page
%      (#:fromproperty (quote header:tagline))))))
    oddFooterMarkup = 
        \markup{
            \line{
                \column{
                    \fill-line{
                        \on-the-fly \part-first-page { \fromproperty #'header:copyright }
                    }
                    \fill-line{
                        \on-the-fly \last-page { \fromproperty #'header:tagline }
                    }
                    \fill-line{
                        \line{ \teeny { "version: " \versionCode } } \null
                    }
                }
            }
        }

    % \void #(begin (newline)(display "oddFooterMarkup: "))
    % \displayScheme \oddFooterMarkup
} 


\paper {
	% line-width = 6.5\in
    top-margin = 0.3\in
    left-margin = 1\in
    right-margin = 1\in
    bottom-margin = 0.3\in
    two-sided = ##t
    inner-margin=0.9\in
    outer-margin=0.9\in
    binding-offset=0.2\in
    
    %=== The below parameters are in units of staff-spaces (The staff-space is the distance between two adjacent staff lines) 
    % markup-system-spacing:  the distance between a (title or top-level) markup and the system that follows it.
        %DEFAULT:    markup-system-spacing = #'((basic-distance . 5) (padding . 0.5) (stretchability . 30))
        markup-system-spacing #'padding = #10
    
    % score-markup-spacing:   the distance between the last system of a score and the (title or top-level) markup that follows it.
        %DEFAULT:  score-markup-spacing = #'((basic-distance . 12) (padding . 0.5) (stretchability . 60))
        
    % score-system-spacing:   the distance between the last system of a score and the first system of the score that follows it, when no (title or top-level) markup exists between them.
        %DEFAULT: score-system-spacing = #'((basic-distance . 14) (minimum-distance . 8) (padding . 1) (stretchability . 120))
        score-system-spacing #'basic-distance = #20
    
    % system-system-spacing:  the distance between two systems in the same score.
        %DEFAULT:  system-system-spacing = #'((basic-distance . 12) (minimum-distance . 8) (padding . 1) (stretchability . 60))
        system-system-spacing #'basic-distance = #20
    
    % markup-markup-spacing:  the distance between two (title or top-level) markups.
        %DEFAULT:  markup-markup-spacing = #'((basic-distance . 1) (padding . 0.5))
        
    % last-bottom-spacing:    the distance from the last system or top-level markup on a page to the bottom of the printable area (i.e. the top of the bottom margin).
        %DEFAULT:  last-bottom-spacing = #'((basic-distance . 1) (minimum-distance . 0) (padding . 1) (stretchability . 30))
        last-bottom-spacing #'basic-distance = #10
    
    % top-system-spacing:     the distance from the top of the printable area (i.e. the bottom of the top margin) to the first system on a page, when there is no (title or top-level) markup between the two.
        %DEFAULT:  top-system-spacing = #'((basic-distance . 1) (minimum-distance . 0) (padding . 1))
        top-system-spacing #'basic-distance = #11
        
    % top-markup-spacing:     the distance from the top of the printable area (i.e. the bottom of the top margin) to the first (title or top-level) markup on a page, when there is no system between the two. 
        %DEFAULT:  top-markup-spacing = #'((basic-distance . 0) (minimum-distance . 0) (padding . 1))
        top-markup-spacing #'basic-distance = #8

	
	print-first-page-number = ##t
	% #(set-paper-size "letter")
	% ragged-bottom = ##t
	% print-all-headers = ##t
	% system-count = #4

	% scoreTitleMarkup = #bookTitleMarkup 
}


% I use the originalLineBreak variable to represent a line break in the original score.  This
% is useful when proofreading, but I might want to change where the line breaks occur later -- hence the use of a variable.
originalLineBreak = {\break}
originalPageBreak = {\pageBreak}



\include #(string-append "sopranoMusic.liy")
\include #(string-append "altoMusic.liy")
\include #(string-append "tenorMusic.liy")
\include #(string-append "bassMusic.liy")
\include #(string-append "tempoIndications.liy")

allMusic =  <<
        \sopranoMusic 
        \altoMusic
        \tenorMusic
        \bassMusic
        \tempoIndications
    >>

dummyKeepAliveMusic =  
    {
        #(skip-of-length allMusic)
        % in most cases, the above-listed parts will all be exactly the same length.  However, I want to handle the case (most likely to occur accidentally than by any other means)
        % where the parts are different lengths.  The above statement will set dummyKeepAliveMusic to be a skip whose length is the longest of all the lengths of the several parts.
    }



scorecontents = {
	\new ChoirStaff
	<<

		\new Staff = "soprano-staff" <<
			\set Staff.instrumentName = "soprano"
            \clef treble
			\new Voice = "dummyKeepAliveVoiceForSopranoStaff" { \dummyKeepAliveMusic }
			\new Voice = "soprano1" { \sopranoMusic }
			\new Voice = "soprano2" { \dummyKeepAliveMusic }
            \new Voice { 
                \tempoIndications 
            }
		>>
		\new Lyrics = "lyricsUnderSopranoStaff" { \dummyKeepAliveMusic }

		\new Staff = "alto-staff" <<
			\set Staff.instrumentName = "alto"
            \clef treble
            \new Voice = "dummyKeepAliveVoiceForAltoStaff" { \dummyKeepAliveMusic }
			\new Voice = "alto1" { \altoMusic }
			\new Voice = "alto2" { \dummyKeepAliveMusic }
            \new Voice { 
                % \tempoIndications
            }
		>>
		\new Lyrics = "lyricsUnderAltoStaff"  { \dummyKeepAliveMusic }
		
        \new Lyrics = "lyricsAboveTenorStaff" \with {
          % lyrics above a staff should have this override
          \override VerticalAxisGroup.staff-affinity = #DOWN
        } { \dummyKeepAliveMusic } 
		\new Staff = "tenor-staff" \with{ 
        %{\RemoveEmptyStaves%} 

        } <<
			\set Staff.instrumentName = "tenor"
            \clef "treble_8"
            \new Voice = "dummyKeepAliveVoiceForTenorStaff" { \dummyKeepAliveMusic }
			\new Voice = "tenor1" {   \tenorMusic            }
            \new Voice = "tenor2" {   \dummyKeepAliveMusic   }
            \new Voice { 
                % \tempoIndications 
            }
		>>
        \new Lyrics = "lyricsUnderTenorStaff" { \dummyKeepAliveMusic } 

        \new StaffGroup = "tenorStaffGroup" 
            \with{   
                \override VerticalAxisGroup.remove-empty = ##t
                \override VerticalAxisGroup.remove-first = ##t
            }
                <<
                    \new Lyrics = "lyricsAboveTenor1Staff" { \dummyKeepAliveMusic } 
                    \new Staff = "tenor1-staff" \with { } <<
                        %% \override Staff.VerticalAxisGroup.remove-first = ##t
                        \set Staff.instrumentName = "tenor 1"
                        \set Staff.shortInstrumentName = "tenor 1"
                        \clef "treble_8"
                        \new Voice = "dummyKeepAliveVoiceForTenor1Staff" { \dummyKeepAliveMusic }
                        \new Voice { 
                            % \tempoIndications 
                        }
                    >> 
                    \new Lyrics = "lyricsUnderTenor1Staff" \with { alignBelowContext = #"tenor1-staff" } { \dummyKeepAliveMusic  }                     
                    \new Staff = "tenor2-staff"  \with { }  <<
                        %% \override Staff.VerticalAxisGroup.remove-first = ##t
                        \set Staff.instrumentName = "tenor 2"
                        \set Staff.shortInstrumentName = "tenor 2"
                        \clef "treble_8" 
                        \new Voice = "dummyKeepAliveVoiceForTenor2Staff" { \dummyKeepAliveMusic }
                        \new Voice { 
                            % \tempoIndications 
                        }
                    >>
                    \new Lyrics = "lyricsUnderTenor2Staff"  \with { alignBelowContext = #"tenor2-staff" } { \dummyKeepAliveMusic  } 
                >>

		\new Staff = "bass-staff"
		<<
			\set Staff.instrumentName = "bass"
            \clef bass
            \new Voice = "dummyKeepAliveVoiceForBassStaff" { \dummyKeepAliveMusic }
			\new Voice = "bass1" {  \bassMusic }
			\new Voice = "bass2" {  \dummyKeepAliveMusic }
            \new Voice { 
                % \tempoIndications 
            }
		>>
		\new Lyrics = "lyricsUnderBassStaff" { \dummyKeepAliveMusic }
		\new Lyrics = "diagnosticLyrics" { \dummyKeepAliveMusic }
        

        \new Lyrics \lyricsto "soprano1"  \sopranoOneLyrics
        \new Lyrics \lyricsto "alto1"     \altoOneLyrics
        \new Lyrics \lyricsto "tenor1"    \tenorOneLyrics
        \new Lyrics \lyricsto "tenor2"    \tenorTwoLyrics
        \new Lyrics \lyricsto "bass1"     \bassOneLyrics
       
       

        % \new Lyrics \lyricsto "tenor2"
        % {
            % \context Lyrics = "diagnosticLyrics" \lyricsto "tenor2" {
                % \numberedSyllableDummyLyrics "t5" 1 100
            % }
        % }
        
	>>
}


layoutSettings = \layout {
                    %indent = 1\in
                    
                    \context{
                        \Staff
                        %\remove Instrument_name_engraver
                        %{ \override DynamicTextSpanner.dash-period = #0 %removes the dashed lines representing "cresc." crescendos, and similar decrescendoes and diminuendos. %}
                        %This seems like a cleaner way to remove the dynamic spanners:
                        \override DynamicTextSpanner.style = #'none %removes the dashed lines representing "cresc." crescendos, and similar decrescendoes and diminuendos.
                        \override TextSpanner.dash-period = #0 %removes the dashed lines 
                        \accidentalStyle modern-voice-cautionary
                    }

                    \context{
                        \Lyrics
                         % \override LyricText.color=#red
                         % \override LyricText.color=#white
                         % \override LyricText.font-size=#-2
                    }
                    
                    \context{
                        \Voice
                        \autoBeamOff
                    }
                    
                    \context{
                        \Score
                        \numericTimeSignature
                        \override DynamicText.direction = #UP
                        \override DynamicLineSpanner.direction = #UP
                         % skipTypesetting = ##t
                    }
                }
                
globalMidiSettings = \midi{  
            \context {
                \Staff
                tempoWholesPerMinute = #(ly:make-moment 60 4)	
                % midiMinimumVolume = #0.7
                % midiMaximumVolume = #0.7
                midiInstrument = #"voice oohs"
            }
        }

sopranoEmphasisMidiSettings = \midi{  
            \context {
                \Voice
                % midiMinimumVolume = #0.7
                % midiMaximumVolume = #0.7
            }
        }
       
% myScore = \score{
        
        % \scorecontents
        % % \layout {\layoutSettings}
    % }

% #(if makeGraphicalOutput
    % (ly:score-add-output-def! myScore layoutSettings)
% )

% #(if makeMidiOutput
    % (ly:score-add-output-def! myScore midiSettings)
% )

% \void #(begin
    % ;(display "layoutSettings: ") 
    % ;(display layoutSettings)
    % ;(newline)  
    % ;(newline)
    % ;(display "myScore: ")
    % ;(display myScore)
    % ;(newline) 
    % ;(display "midiSettings: ")
    % ;(display midiSettings) 
    % ;(newline)
    % ;(display "ly:command-line-code: ")
    % ;(display (ly:command-line-code)) 
    % (newline)(newline)
    % (display "ly:all-options: ")(display (ly:all-options))(newline)(newline)
% )

\header{
    tagline =  "Engraved 2019 in Seattle for The Meridian Ensemble; Yuly Kopkin, Artistic Director"
}



%%%% make the graphical output, if so requested by the makeGraphicalOutput variable.
$(if makeGraphicalOutput
    (begin (newline)(display "we are making graphical output.")(newline)
        #{
            \book { \score{ \scorecontents  \layout {\layoutSettings} } }
        #}
    )
    (begin (newline)(display "we are not making graphical output.")(newline))
)

%%%% make the midi output, if so requested by the makMidiOutput variable.
% \book{ \bookOutputSuffix "soprano"  \score { \sopranoMusic  \midi { } } }
% \book{ \bookOutputSuffix "bass"     \score { \bassMusic     \midi { } } }
% the above two lines create the midi files, as desired, but we want to choose, programmatically, whether to create the midi files.

% #(if makeMidiOutput
    % (begin (newline)(display "we are making midi output.")(newline)
        % #{ 
            % \book{ \bookOutputSuffix "soprano"  \score { \sopranoMusic  \midi { } } } 
            % \book{ \bookOutputSuffix "bass"     \score { \bassMusic     \midi { } } }
        % #}
    % )
    % (begin (newline)(display "we are not making midi output.")(newline))
% )
% the above throws an error

% $(if makeMidiOutput
    % (begin (newline)(display "we are making midi output.")(newline)
        % #{ 
            % \book{ \bookOutputSuffix "soprano"  \score { \sopranoMusic  \midi { } } } 
            % \book{ \bookOutputSuffix "bass"     \score { \bassMusic     \midi { } } }
        % #}
    % )
    % (begin (newline)(display "we are not making midi output.")(newline))
% )
% the above generates the soprano midi file, but not the bass midi file, and throws an error -- I do not understand why.


% the '@' character in the below statement is very important - it is the list splicing operator,
% which tells Lilypond to take the list returned by the below expression, and 
% process that list in the same way that it would process multiple expressions found directly in the 
% raw lilypond input.
$@(if makeMidiOutput
    (begin (newline)(display "we are making midi output.")(newline)
        (list
            #{ \book{ \bookOutputSuffix "allParts"           \score {  \scorecontents                        \midi { \globalMidiSettings } } } #}
            #{ \book{ \bookOutputSuffix "soprano"            \score { << \sopranoMusic \tempoIndications >>  \midi { \globalMidiSettings } } } #}
            #{ \book{ \bookOutputSuffix "alto"               \score { << \altoMusic    \tempoIndications >>  \midi { \globalMidiSettings } } } #}
            #{ \book{ \bookOutputSuffix "tenor"              \score { << \tenorMusic   \tempoIndications >>  \midi { \globalMidiSettings } } } #}
            #{ \book{ \bookOutputSuffix "bass"               \score { << \bassMusic    \tempoIndications >>  \midi { \globalMidiSettings } } } #}
            ; TO-DO: see http://lilypond.org/doc/v2.18/Documentation/notation/controlling-midi-dynamics 
            ; to make emphasized midi parts.
            #{ 
                \book{ 
                    \bookOutputSuffix "sopranoEmphasized"  
                    \score { 
                        << 
                            \new Staff="emphasized-staff" \with {} << \sopranoMusic \tempoIndications >>  
                            \new Staff="deEmphasized-staff" \with { midiMaximumVolume=\deEmphasisRatioForMidiEmphasizedParts } << 
                                \altoMusic
                                \tenorMusic
                                \bassMusic
                            >>  
                        >>  
                        \midi { \globalMidiSettings }  
                    } 
                } 
            #} 
            #{ 
                \book{ 
                    \bookOutputSuffix "altoEmphasized"  
                    \score { 
                        << 
                            \new Staff="emphasized-staff" \with {} << \altoMusic \tempoIndications >>  
                            \new Staff="deEmphasized-staff" \with { midiMaximumVolume=\deEmphasisRatioForMidiEmphasizedParts } << 
                                \sopranoMusic
                                \tenorMusic
                                \bassMusic
                            >>  
                        >>  
                        \midi { \globalMidiSettings }  
                    } 
                } 
            #} 
            #{ 
                \book{ 
                    \bookOutputSuffix "tenorEmphasized"  
                    \score { 
                        << 
                            \new Staff="emphasized-staff" \with {} << \tenorMusic \tempoIndications >>  
                            \new Staff="deEmphasized-staff" \with { midiMaximumVolume=\deEmphasisRatioForMidiEmphasizedParts } << 
                                \sopranoMusic
                                \altoMusic
                                \bassMusic
                            >>  
                        >>  
                        \midi { \globalMidiSettings }  
                    } 
                } 
            #} 
            #{ 
                \book{ 
                    \bookOutputSuffix "bassEmphasized"  
                    \score { 
                        << 
                            \new Staff="emphasized-staff" \with {} << \bassMusic \tempoIndications >>  
                            \new Staff="deEmphasized-staff" \with { midiMaximumVolume=\deEmphasisRatioForMidiEmphasizedParts } << 
                                \sopranoMusic
                                \altoMusic
                                \tenorMusic
                            >>  
                        >>  
                        \midi { \globalMidiSettings }  
                    } 
                } 
            #} 
        )
    )
    (begin (newline)(display "we are not making midi output.")(newline))
)


